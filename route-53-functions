#!/bin/bash


function route-53:apply-resource-record-changes() {
    local domainName=${1:?Need domain name}
    shift
    local changes="${@}"
    local hostedZoneId=$(route-53:get-zone-id "${domainName}")
    local changeBatch='{"Changes":['${changes}']}'
    local result=$(echo ${changeBatch} | aws route53 change-resource-record-sets --hosted-zone-id "${hostedZoneId}" --change-batch file:///dev/stdin)
}


function route-53:create-resource-record-changes-subset() {
    [[ -z "${1:-}" ]] && echo "${FUNCNAME[0]} domain type value ttl [name ...]" >/dev/stderr && return
    local domain=${1:?Need domain}
    local type=${2:?Need record type}
    local value=${3:?Need value}
    local ttl=${4:-300}
    shift 4
    if [[ -n "${*}" ]]; then
        # name is "foo.{domain}
        echo "${@}" | tr ' ' '\n' | sort -u | while read name; do
            route-53:get-record-info "${name}"
        done | while read name curdomain zoneid curtype curttl curvalue; do
            if [[ "${type}" != "${curtype}" ]] || [[ "${ttl}" != "${curttl}" ]] || [[ "${value}" != "${curvalue}" ]]; then
                if [[ "${zoneid}" != "-" ]] && [[ "${curtype}" != "-" ]] && [[ "${curttl}" != "-" ]]; then
                    echo "{\"Action\":\"DELETE\",\"ResourceRecordSet\":{\"Name\":\"${name}.\",\"Type\":\"${curtype}\",\"TTL\":${curttl},\"ResourceRecords\":[{\"Value\":\"${curvalue}\"}]}},"
                fi
                echo "{\"Action\":\"UPSERT\",\"ResourceRecordSet\":{\"Name\":\"${name}.\",\"Type\":\"${type}\",\"TTL\":${ttl},\"ResourceRecords\":[{\"Value\":\"${value}\"}]}},"
            fi
        done
    else
        # A domain level entry ...
        echo "{\"Action\":\"UPSERT\",\"ResourceRecordSet\":{\"Name\":\"${domain}.\",\"Type\":\"${type}\",\"TTL\":${ttl},\"ResourceRecords\":[{\"Value\":\"${value}\"}]}},"
    fi
}


function route-53:delete-record {
    for name in "${@}"; do
        local domainName=$(echo "${name}" | sed -E 's/^[^\.]*\.//')
        local hostedZoneId=$(aws route53 list-hosted-zones --output text | grep "${domainName}" | awk '{print $3}' | cut -d/ -f3)
        local type=$(route-53:get-record-type "${name}")
        if [[ -n "${type}" ]]; then
            local ttl=$(route-53:get-record-ttl "${name}")
            local value=$(route-53:get-record-value "${name}")
            local result=$(aws route53 change-resource-record-sets --hosted-zone-id "${hostedZoneId}" --change-batch file:///dev/stdin <<END_OF_JSON
{
    "Changes": [
        {
            "Action": "DELETE",
            "ResourceRecordSet": {
                "Name": "${name}.",
                "Type": "${type}",
                "TTL": ${ttl},
                "ResourceRecords": [
                    {
                        "Value": "${value}"
                    }
                ]                
            }
        }
    ]
}
END_OF_JSON
            )
        fi
    done
}


function route-53:get-record-info() {
    local name=
    for name in "${@}"; do
        local domain=$(echo "${name}" | sed -E 's/^[^\.]*\.//')
        local retval="${name} ${domain} - - - -"
        local id=$(route-53:get-zone-id "${domain}")
        if [[ -n "${id}" ]]; then
            retval="${name} ${domain} ${id} - - -"
            local result=$(aws route53 list-resource-record-sets --hosted-zone-id "${id}" --query "ResourceRecordSets[?Name == '${name#.}.']")
            if (( $(echo "${result}" | jq length) == 1 )); then
                local type=$(echo "${result}" | jq -r .[0].Type | sed -E 's/^null$/-/')
                local ttl=$(echo "${result}" | jq -r .[0].TTL | sed -E 's/^null$/-/')
                local value=$(echo "${result}" | jq -r .[0].ResourceRecords[0].Value | sed -E 's/^null$/-/')
                retval="${name} ${domain} ${id} ${type} ${ttl} ${value}"
            fi
        fi
        echo "${retval}"
    done
}


function route-53:get-record-ttl() {
    local name=${1:?Need Record Name}
    local domainName=$(echo "${name}" | sed -E 's/^[^\.]*\.//')
    local id=$(route-53:get-zone-id "${domainName}")
    aws route53 list-resource-record-sets --hosted-zone-id "${id}" --query "ResourceRecordSets[?Name == '${name#.}.']" | \
    jq -r .[0].TTL | \
    grep -vE '^null$'
}


function route-53:get-record-type() {
    local name=${1:?Need Record Name}
    local domainName=$(echo "${name}" | sed -E 's/^[^\.]*\.//')
    local id=$(route-53:get-zone-id "${domainName}")
    aws route53 list-resource-record-sets --hosted-zone-id "${id}" --query "ResourceRecordSets[?Name == '${name#.}.']" | \
    jq -r .[0].Type | \
    grep -vE '^null$'
}


function route-53:get-record-value() {
    local name=${1:?Need Record Name}
    local domainName=$(echo "${name}" | sed -E 's/^[^\.]*\.//')
    local id=$(route-53:get-zone-id "${domainName}")
    aws route53 list-resource-record-sets --hosted-zone-id "${id}" --query "ResourceRecordSets[?Name == '${name#.}.']" | \
    jq -r .[0].ResourceRecords[0].Value
}


function route-53:get-zone-id() {
    local name=${1:?Need Zone Name}
    aws route53 list-hosted-zones --query "HostedZones[?Name == '${name#.}.']" | \
    jq -r .[0].Id | \
    cut -d/ -f3 | \
    grep -vE '^null$'
}


function route-53:get-zone-name() {
    local id=${1:?Need Zone ID}
    aws route53 get-hosted-zone --id "${id}" | \
    jq -r '.HostedZone.Name' | \
    sed 's/\.$//' | \
    grep -vE '^null$'
}


function route-53:list-zones() {
    aws route53 list-hosted-zones --output text | \
    grep HOSTEDZONES | \
    awk '{ print $4, $3 }' | \
    sed 's|. /hostedzone/| |' | \
    awk '{ print $2, $1 }'
}


function route-53:set-cname-record() {
    # args: cname TTL [recordname ...]
    route-53:set-ipv4-a-or-cname-record 'CNAME' "${@}"
}


function route-53:set-ipv4-a-record() {
    # args: ipv4 TTL [recordname ...]
    route-53:set-ipv4-a-or-cname-record 'A' "${@}"
}


function route-53:set-ipv4-a-or-cname-record() {
    local type=${1:?Need record type}
    shift
    local address=${1:?Need  address}
    shift
    local ttl=${1:-300}
    shift
    for name in "${@}"; do
        local domainName=$(echo "${name}" | sed -E 's/^[^\.]*\.//')
        local hostedZoneId=$(aws route53 list-hosted-zones --output text | grep  "\s${domainName}\.\s" | awk '{print $3}' | cut -d/ -f3)
        local t=$(route-53:get-record-type "${name}")
        [[ -n "${t}" && "${t}" != "${type}" ]] && route-53:delete-record "${name}"
        local result=$(aws route53 change-resource-record-sets --hosted-zone-id "${hostedZoneId}" --change-batch file:///dev/stdin <<END_OF_JSON
{
  "Changes": [
    {
      "Action": "UPSERT",
      "ResourceRecordSet": {
        "Name": "${name}.",
        "Type": "${type}",
        "TTL": ${ttl},
        "ResourceRecords": [
          {
            "Value": "${address}"
          }
        ]
      }
    }
  ]
}
END_OF_JSON
        )
    done
}


