#!/bin/bash

export AWS_MAGIC_ENDPOINT=http://169.254.169.254/latest
export AWS_DYNAMIC_ENDPOINT=${AWS_MAGIC_ENDPOINT}/dynamic
export AWS_META_DATA_ENDPOINT=${AWS_MAGIC_ENDPOINT}/meta-data

export MAILSERVER_HOME=${MAILSERVER_HOME:-/var/lib/mailu}
export MAILSERVER_CONFIGURATION_FILE=${MAILSERVER_CONFIGURATION_FILE:-${MAILSERVER_HOME}/mailu.env}
export MAILSERVER_CONFIGURATION_FILE_TEMPLATE=${MAILSERVER_CONFIGURATION_FILE_TEMPLATE:-${MAILSERVER_CONFIGURATION_FILE}.tmpl8}
export MAILSERVER_DATA_FILESYSTEM=${MAILSERVER_DATA_FILESYSTEM:-mailserver-data}
export MAILSERVER_DATA_MOUNTPOINT=${MAILSERVER_DATA_MOUNTPOINT:-/var/mail}
export MAILSERVER_MAILU_DATABASE=${MAILSERVER_MAILU_DATABASE:-${MAILSERVER_DATA_MOUNTPOINT}/data/main.db}
export MAILSERVER_DOCKER_COMPOSE_FILE=${MAILSERVER_DOCKER_COMPOSE_FILE:-${MAILSERVER_HOME}/docker-compose.yml}
export MAILSERVER_DOCKER_COMPOSE_FILE_TEMPLATE=${MAILSERVER_DOCKER_COMPOSE_FILE_TEMPLATE:-${MAILSERVER_DOCKER_COMPOSE_FILE}.tmpl8}
export MAILSERVER_TOOLS_URL_PREFIX=${MAILSERVER_TOOLS_URL_PREFIX:-https://raw.githubusercontent.com/jim-hanlon/m-s/main}

prg=${BASH_SOURCE[0]}
[[ ( -n "${prg}" ) && ( -f "${prg}" ) ]] || (echo "[FATAL] cannot locate: '$0'" 1>&2)
task=$(basename -- "${prg}")
prgdir=$(dirname -- "${prg}")
prgdir=$(cd "${prgdir}" > /dev/null && pwd)

source "${prgdir}/route-53-functions"


function instance:create-tag() {
    [[ -z "${1:-}" ]] && echo "${FUNCNAME[0]} key value" >/dev/stderr && return
    local key=${1:?Need key}
    local value=${2?Need value}
    local instanceId=$(instance:id)
    local region=$(instance:region)
    aws ec2 create-tags --region "${region}" --resources "${instanceId}" --tags Key="${key}",Value="${value}"
}


function instance:delete-tag() {
    [[ -z "${1:-}" ]] && echo "${FUNCNAME[0]} key" >/dev/stderr && return
    local key=${1:?Need key}
    local value=${2:-''}
    local instanceId=$(instance:id)
    local region=$(instance:region)
    local tags=Key=${key}
    [[ -n "${value}" ]] && tags="${tags},Value=${value}"
    aws ec2 delete-tags --region "${region}" --resources "${instanceId}" --tags "${tags}"
}


function instance:id() {
    curl -s "${AWS_META_DATA_ENDPOINT}/instance-id"
}


function instance:public-hostname() {
    curl -s "${AWS_META_DATA_ENDPOINT}/public-hostname"
}


function instance:public-ipv4() {
    curl -s "${AWS_META_DATA_ENDPOINT}/public-ipv4"
}


function instance:read-tag() {
    [[ -z "${1:-}" ]] && echo "${FUNCNAME[0]} key" >/dev/stderr && return
    local key=${1:?Need key}
    local instanceId=$(instance:id)
    local region=$(instance:region)
    aws ec2 describe-tags --region "${region}" \
        --filters Name=resource-id,Values=${instanceId} Name=key,Values=$key | jq -r '.Tags[].Value'
}


function instance:availability-zone() {
    curl -s "${AWS_DYNAMIC_ENDPOINT}/instance-identity/document" | jq -r '.availabilityZone'
}


function instance:region() {
    curl -s "${AWS_DYNAMIC_ENDPOINT}/instance-identity/document" | jq -r '.region'
}


function instance:set-a-records() {
    local ec2PublicIpv4=$(instance:public-ipv4)
    route-53:set-ipv4-a-record "${ec2PublicIpv4}" 300 "${@}"
}


function instance:set-cname-records() {
    local ec2PublicHostname=$(instance:public-hostname)
    route-53:set-ipv4-a-record "${ec2PublicHostname}" 300 "${@}"
}


function mailserver:create-accounts() {
    sqlite3 "${MAILSERVER_MAILU_DATABASE}" 'delete from user;'
    sqlite3 "${MAILSERVER_MAILU_DATABASE}" 'delete from alias;'

    if ${MAILSERVER_CREATE_ADMIN:-false}; then
        local adminSecret=$(mailserver:get-secret mailserver-admin)
        local adminAccount=$(echo "${adminSecret}" | jq -r '.admin_account')
        local adminEmail="${adminAccount}@$(mailserver:get-primary-domain-name)"
        local adminPw=$(echo "${adminSecret}" | jq -r '.admin_pw')
        docker-compose -p mailu exec admin flask mailu user-delete "${adminEmail}"
        docker-compose -p mailu exec admin flask mailu alias-delete "${adminEmail}"
        docker-compose -p mailu exec admin flask mailu admin "${adminAccount}" "$(mailserver:get-primary-domain-name)" "${adminPw}"
        local aliases=
        for domain in $(mailserver:get-additional-domain-names); do
            aliases="${aliases},${adminAccount}@${domain}"
        done
        aliases=$(echo "${aliases}" | cut -d, -f2-)
        docker-compose -p mailu exec admin flask mailu alias "${adminAccount}" "$(mailserver:get-primary-domain-name)" "${aliases}"
    fi

    local usersSecret=$(mailserver:get-secret mailserver-users)
    local nUsers=$(echo "${usersSecret}" | jq '.users | length')
    for i in $(seq 0 $(($nUsers-1))); do
        local name=$(echo "${usersSecret}" | jq -r ".users[$i].name")
        local domain=$(echo "${usersSecret}" | jq -r ".users[$i].domain")
        local email="${name}@${domain}"
        local password=$(echo "${usersSecret}" | jq -r ".users[$i].password")
        local aliases=$(echo "${usersSecret}" | jq -r ".users[$i].aliases")
        local alias_wildcard=$(echo "${usersSecret}" | jq -r ".users[$i].alias_wildcard")
        local wildcardOption=''
        if [[ "$alias_wildcard" == 'true' ]]; then
            wildcardOption='--wildcard'
        fi
        local is_admin=$(echo "${usersSecret}" | jq -r ".users[$i].is_admin")
        docker-compose -p mailu exec admin flask mailu user-delete "${email}"
        docker-compose -p mailu exec admin flask mailu alias-delete "${email}"
        if [[ "${is_admin}" == "true" ]]; then
            docker-compose -p mailu exec admin flask mailu admin "${name}" "${domain}" "${password}"
        else
            docker-compose -p mailu exec admin flask mailu user "${name}" "${domain}" "${password}"
        fi
        if [[ -n "${aliases}" ]]; then
            docker-compose -p mailu exec admin flask mailu alias "${wildcardOption}" "${name}" "${domain}" "${aliases}"
        fi
    done
}


function mailserver:create-dns-records() {
    local publicIpv4=$(instance:public-ipv4)
    for domain in $(mailserver:get-mail-domain-names); do
        local mailHostName="mail.${domain}"
        local fqdns=$(mailserver:get-additional-host-fqdns "${domain}")
        local changes=$(mailserver:create-resource-record-changeset "${mailHostName}" "${publicIpv4}" ${fqdns})
        # echo route-53:apply-resource-record-changes "${domain}" ...
        # echo "[${changes}]" | jq .
        route-53:apply-resource-record-changes "${domain}" "${changes}"
    done
}


function mailserver:create-resource-record-changeset() {
    [[ -z "${1:-}" ]] && echo "${FUNCNAME[0]} mailhostname ipv4 [althost ...]" >/dev/stderr && return
    local mailhostFQDN=${1:?Need mail host FQDN}
    local ipv4=${2:?Need IPv4 address}
    shift 2
    local domain=$(echo "${mailhostFQDN}" | sed -E 's/^[^\.]*\.//')
    local mailhost=$(echo "${mailhostFQDN}" | sed -E 's/^([^\.]*)\..*$/\1/')
    local hosts=$(echo "${@}" | tr ' ' '\n' | grep -v "${mailhost}")
    local changes=
    changes=${changes}$(route-53:create-resource-record-changes-subset "${domain}" A "${ipv4}" 300 "${mailhostFQDN}")
    changes=${changes}$(route-53:create-resource-record-changes-subset "${domain}" CNAME "${mailhostFQDN}" 300 ${hosts})
    changes=${changes}$(route-53:create-resource-record-changes-subset "${domain}" MX "10 ${mailhostFQDN}." 3600)
    changes=${changes}$(route-53:create-resource-record-changes-subset "${domain}" SPF "\\\"v=spf1 include:${domain} include:amazonses.com ~all\\\"" 3600)
    changes=${changes}$(route-53:create-resource-record-changes-subset "${domain}" TXT "\\\"v=spf1 include:${domain} include:amazonses.com ~all\\\"" 3600)
    echo ${changes%,}
}


function mailserver:get-account-emails() {
    [[ -z "${1:-}" ]] && echo "${FUNCNAME[0]} account domain" >/dev/stderr && return
    local account=${1?:Need account}
    local domain=${2?:Need domain}
    sqlite3 "${MAILSERVER_DATA_MOUNTPOINT}" \
            "select email from user where localpart='${account}' and domain_name='${domain}'"
}


function mailserver:get-additional-domain-names() {
    cat "${MAILSERVER_CONFIGURATION_FILE}" | \
    grep -E '^HOSTNAMES=' | \
    cut -d= -f2 | \
    tr ',' '\n' | \
    perl -0777 -pe 's/(?:[a-z]+\.)?([a-z\.]*)/\1/g' | \
    grep -v "^mail\.$(mailserver:get-primary-domain-name)\$" | \
    sort -u
}


function mailserver:get-additional-host-fqdns() {
    [[ -z "${1:-}" ]] && echo "${FUNCNAME[0]} domain" >/dev/stderr && return
    local domain=${1?:Need domain}
    cat "${MAILSERVER_CONFIGURATION_FILE}" | \
    grep -E '^HOSTNAMES=' | \
    cut -d= -f2 | \
    tr ',' '\n' | \
    grep "\.${domain}\$" | \
    grep -v '^mail\.' | \
    sort -u
}


function mailserver:get-mail-domain-names() {
    (mailserver:get-primary-domain-name && mailserver:get-additional-domain-names) | sort -u
}


function mailserver:get-mail-server-names() {
    for d in $(mailserver:get-mail-domain-names); do
        echo mail.${d}
    done
}


function mailserver:get-primary-domain-name() {
    cat "${MAILSERVER_CONFIGURATION_FILE}" | \
    grep -E '^DOMAIN=' | \
    cut -d= -f2
}


function mailserver:get-secret() {
    [[ -z "${1:-}" ]] && echo "${FUNCNAME[0]} secret-name" >/dev/stderr && return
    local secretId=${1:?Need secret name}
    local region=$(instance:region)
    aws secretsmanager get-secret-value --region "${region}" --secret-id "${secretId}" | jq -r .SecretString
}


function mailserver:idle() {
    cd "${MAILSERVER_HOME}"
    docker-compose -p mailu stop
}


function mailserver:initialize() {
    echo "[INFO] mailserver:initialize mount-mailserver-data"
    mailserver:mount-mailserver-data
    echo "[INFO] mailserver:initialize install_mailu_configuration"
    mailserver:install_mailu_configuration
    echo "[INFO] mailserver:initialize create-accounts"
    mailserver:create-accounts
    echo "[INFO] mailserver:initialize create-dns-records"
    mailserver:create-dns-records
    echo "[INFO] mailserver:initialize install-crontab-reboot-entry"
    mailserver:install-crontab-reboot-entry
    echo "[INFO] mailserver:initialize update-ubuntu-bashrc"
    mailserver:update-ubuntu-bashrc
}


function mailserver:install-crontab-reboot-entry() {
    local cronline="@reboot /bin/bash -c '(source /etc/environment && "
    cronline="${cronline} source ${MAILSERVER_HOME}/server-functions && "
    cronline="${cronline} instance:create-tag BootstrapStatus complete && "
    cronline="${cronline} mailserver:initialize && mailserver:start) "
    cronline="${cronline} >/var/log/reboot.log 2>&1'"
    export cronline="${cronline}"
    ((crontab -l 2>/dev/null | grep -v '@reboot') ; echo "${cronline}") | crontab -
}


function mailserver:install() {
    echo "[INFO] mailserver:install start"
    bootstrapStatus=$(instance:read-tag BootstrapStatus)
    echo "[INFO] mailserver:install BootstrapStatus=${bootstrapStatus}"
    if [[ "${bootstrapStatus}" != "complete" ]] && 
        [[ "${bootstrapStatus}" != "rebooting" ]]; then
        instance:create-tag BootstrapStatus 'initializing mailserver'
        echo "[INFO] mailserver:install BootstrapStatus=$(instance:read-tag BootstrapStatus)"
    fi
    local upgradable=$(sudo apt list --upgradable 2>/dev/null | tail -n +2 | cut -d/ -f1)
    if [[ -n "${upgradable}" ]]; then
        echo "[INFO] mailserver:install upgrade ${upgradable}"
        instance:create-tag BootstrapStatus "upgrading ${upgradable}"
        apt-get install -y ${upgradable}
    fi
    if [[ -f /var/run/reboot-required ]]; then
        echo "[INFO] mailserver:install rebooting"
        instance:create-tag BootstrapStatus rebooting
        reboot
    else
        echo "[INFO] mailserver:install complete"
        instance:create-tag BootstrapStatus complete
    fi
    mailserver:initialize
    mailserver:start
}


function mailserver:install_mailu_configuration() {
    cd "${MAILSERVER_HOME}"
    git pull
    local mailuKey=$(head /dev/urandom | tr -dc A-Z0-9 | head -c 16)
    local relayHostSecret=$(mailserver:get-secret mailserver-relayhost)
    local relayHost=$(echo "${relayHostSecret}" | jq -r '.relayhost')
    local relayUser=$(echo "${relayHostSecret}" | jq -r '.relayuser')
    local relayPassword=$(echo "${relayHostSecret}" | jq -r '.relaypassword')
    local version=$(ls -1 "${MAILSERVER_CONFIGURATION_FILE}"* 2>/dev/null | grep -E '\.env(\.[1-9][0-9]*)?$' | wc -l )
    [[ -f "${MAILSERVER_CONFIGURATION_FILE}" ]] && cp --archive "${MAILSERVER_CONFIGURATION_FILE}" "${MAILSERVER_CONFIGURATION_FILE}.${version}"
    (umask u=r,g=,o= && cat "${MAILSERVER_CONFIGURATION_FILE_TEMPLATE}" | \
        sed -E 's|SECRET_KEY=.*$|SECRET_KEY='${mailuKey}'|g' | \
        sed -E 's|RELAYHOST=.*$|RELAYHOST='${relayHost}'|g' | \
        sed -E 's|RELAYUSER=.*$|RELAYUSER='${relayUser}'|g' | \
        sed -E 's|RELAYPASSWORD=.*$|RELAYPASSWORD='${relayPassword}'|g' \
        > "${MAILSERVER_CONFIGURATION_FILE}")
    local localIPv4=$(curl -s "${AWS_META_DATA_ENDPOINT}/local-ipv4")
    version=$(ls -1 "${MAILSERVER_DOCKER_COMPOSE_FILE}"* 2>/dev/null | grep -E '\.yml(.[1-9][0-9]*)?$' | wc -l )
    [[ -f "${MAILSERVER_DOCKER_COMPOSE_FILE}" ]] && cp --archive "${MAILSERVER_DOCKER_COMPOSE_FILE}" "${MAILSERVER_DOCKER_COMPOSE_FILE}.${version}"
    cat "${MAILSERVER_DOCKER_COMPOSE_FILE_TEMPLATE}" | \
        sed -E "s|LOCAL_IPV4|${localIPv4}|g" | \
        sed -E "s|MAILSERVER_HOME|${MAILSERVER_HOME}|g" | \
        sed -E "s|MAILSERVER_DATA_MOUNTPOINT|${MAILSERVER_DATA_MOUNTPOINT}|g" > "${MAILSERVER_DOCKER_COMPOSE_FILE}"
}


function mailserver:mount-mailserver-data() {
    local availabilityZone=$(instance:availability-zone)
    local region=$(instance:region)
    local fileSystemId=$(aws --region ${region} efs describe-file-systems | \
                         jq -r '.FileSystems[] | { "FileSystemId": .FileSystemId, "Tags": .Tags[] } | { "FileSystemId": .FileSystemId, "Key": .Tags.Key, "Value": .Tags.Value } | select(.Key == "Name" and .Value == "'${MAILSERVER_DATA_FILESYSTEM}'") | .FileSystemId')
    local fileSystemName="${fileSystemId}.efs.${region}.amazonaws.com"
    local tmpfile=/tmp/mailserver-mount-mailserver-data-${$}-${RANDOM}
    cat /etc/fstab | grep -vE "^${fileSystemName}:/" > "${tmpfile}"
    (cat "${tmpfile}" && echo "${fileSystemName}:/ ${MAILSERVER_DATA_MOUNTPOINT} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0") > /etc/fstab
    rm -f "${tmpfile}"
    mkdir -p "${MAILSERVER_DATA_MOUNTPOINT}"
    chown nobody:nogroup "${MAILSERVER_DATA_MOUNTPOINT}"
    mount "${MAILSERVER_DATA_MOUNTPOINT}"
}


function mailserver:set-a-records() {
    instance:set-a-records $(mailserver:get-mail-server-names)
}


function mailserver:set-cnames() {
    instance:set-cname-records  $(mailserver:get-mail-server-names)
}


function mailserver:start() {
    echo "[INFO] mailserver:start"
    cd "${MAILSERVER_HOME}"
    docker-compose -p mailu up -d
}


function mailserver:stop() {
    echo "[INFO] mailserver:stop"
    cd "${MAILSERVER_HOME}"
    docker-compose -p mailu down --remove-orphans
}


function mailserver:update-ubuntu-bashrc() {
    local bashrc=/home/ubuntu/.bashrc
    local version=$(ls -1 "${bashrc}"* 2>/dev/null | grep -E '(\.[1-9][0-9]*)?$' | wc -l )
    touch "${bashrc}"
    cp --archive "${bashrc}" "${bashrc}.${version}"
    chown ubuntu:ubuntu "${bashrc}.${version}"
    ((cat "${bashrc}.${version}" | grep -v MAILSERVER_HOME) &&
     echo -e "\nexport MAILSERVER_HOME=${MAILSERVER_HOME} && cd \"\${MAILSERVER_HOME}\"\n") >> /home/ubuntu/.bashrc
}



