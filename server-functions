#!/bin/bash

export AWS_MAGIC_ENDPOINT=http://169.254.169.254/latest
export AWS_DYNAMIC_ENDPOINT=${AWS_MAGIC_ENDPOINT}/dynamic
export AWS_META_DATA_ENDPOINT=${AWS_MAGIC_ENDPOINT}/meta-data

export MAILSERVER_HOME=${MAILSERVER_HOME:-/var/lib/mailu}
export MAILSERVER_CONFIGURATION_FILE=${MAILSERVER_CONFIGURATION_FILE:-${MAILSERVER_HOME}/mailu.env}
export MAILSERVER_CONFIGURATION_FILE_TEMPLATE=${MAILSERVER_CONFIGURATION_FILE_TEMPLATE:-${MAILSERVER_CONFIGURATION_FILE}.tmpl8}
export MAILSERVER_DATA_FILESYSTEM=${MAILSERVER_DATA_FILESYSTEM:-mailserver-data}
export MAILSERVER_DATA_MOUNTPOINT=${MAILSERVER_DATA_MOUNTPOINT:-/var/mail}
export MAILSERVER_DOCKER_COMPOSE_FILE=${MAILSERVER_DOCKER_COMPOSE_FILE:-${MAILSERVER_HOME}/docker-compose.yml}
export MAILSERVER_DOCKER_COMPOSE_FILE_TEMPLATE=${MAILSERVER_DOCKER_COMPOSE_FILE_TEMPLATE:-${MAILSERVER_DOCKER_COMPOSE_FILE}.tmpl8}
export MAILSERVER_TOOLS_URL_PREFIX=${MAILSERVER_TOOLS_URL_PREFIX:-https://raw.githubusercontent.com/jim-hanlon/m-s/main}

prg=${BASH_SOURCE[0]}
[[ ( -n "${prg}" ) && ( -f "${prg}" ) ]] || (echo "[FATAL] cannot locate: '$0'" 1>&2)
task=$(basename -- "${prg}")
prgdir=$(dirname -- "${prg}")
prgdir=$(cd "${prgdir}" > /dev/null && pwd)

source "${prgdir}/route-53-functions"


function instance:create-tag() {
    local key=${1:?Need key}
    local value=${2?Need value}
    local instanceId=$(instance:id)
    local region=$(instance:region)
    aws ec2 create-tags --region "${region}" --resources "${instanceId}" --tags Key="${key}",Value="${value}"
}


function instance:delete-tag() {
    local key=${1:?Need key}
    local value=${2:-''}
    local instanceId=$(instance:id)
    local region=$(instance:region)
    local tags=Key=${key}
    [[ -n "${value}" ]] && tags="${tags},Value=${value}"
    aws ec2 delete-tags --region "${region}" --resources "${instanceId}" --tags "${tags}"
}


function instance:id() {
    curl -s "${AWS_META_DATA_ENDPOINT}/instance-id"
}


function instance:public-hostname() {
    curl -s "${AWS_META_DATA_ENDPOINT}/public-hostname"
}


function instance:public-ipv4() {
    curl -s "${AWS_META_DATA_ENDPOINT}/public-ipv4"
}


function instance:read-tag() {
    local key=${1:?Need key}
    local instanceId=$(instance:id)
    local region=$(instance:region)
    aws ec2 describe-tags --region "${region}" \
        --filters Name=resource-id,Values=${instanceId} Name=key,Values=$key | jq -r '.Tags[].Value'
}


function instance:availability-zone() {
    curl -s "${AWS_DYNAMIC_ENDPOINT}/instance-identity/document" | jq -r '.availabilityZone'
}


function instance:region() {
    curl -s "${AWS_DYNAMIC_ENDPOINT}/instance-identity/document" | jq -r '.region'
}


function instance:set-a-records() {
    local ec2PublicIpv4=$(instance:public-ipv4)
    route-53:set-ipv4-a-record "${ec2PublicIpv4}" 300 "${@}"
}


function instance:set-cname-records() {
    local ec2PublicHostname=$(instance:public-hostname)
    route-53:set-ipv4-a-record "${ec2PublicHostname}" 300 "${@}"
}


function mailserver:get-secret() {
    local secretId=${1:?Need secret name}
    local region=$(instance:region)
    aws secretsmanager get-secret-value --region "${region}" --secret-id "${secretId}" | jq -r .SecretString
}


function mailserver:idle() {
    cd "${MAILSERVER_HOME}"
    docker-compose -p mailu stop
}


function mailserver:initialize() {
    mailserver:mount-mailserver-data
    mailserver:install_mailu_configuration
    mailserver:set-a-records
    mailserver:install-crontab-reboot-entry
}


function mailserver:install-crontab-reboot-entry() {
    ((crontab -l 2>/dev/null | grep -v '@reboot'); \
     echo "@reboot /bin/bash -c '(source /etc/environment && source ${MAILSERVER_HOME}/server-functions && instance:create-tag BootstrapStatus complete && mailserver:initialize && mailserver:start) >/var/log/reboot.log 2>&1'") | crontab -
}


function mailserver:install() {
    bootstrapStatus=$(instance:read-tag BootstrapStatus)
    if [[ "${bootstrapStatus}" != "complete" ]] && 
        [[ "${bootstrapStatus}" != "rebooting" ]]; then
        instance:create-tag BootstrapStatus 'initializing mailserver'
        mailserver:initialize
        mailserver:start
        local adminSecret=$(mailserver:get-secret mailserver-admin)
        local adminAccount=$(echo "${relayHostSecret}" | jq -r '.admin_account')
        local adminDomain=$(echo "${adminSecret}" | jq -r '.admin_domain')
        local adminMode=$(echo "${relayHostSecret}" | jq -r '.admin_mode')
        local adminPw=$(echo "${relayHostSecret}" | jq -r '.admin_pw')
        for hostname in $(grep HOSTNAMES ${MAILSERVER_CONFIGURATION_FILE} | cut -d= -f2 | cut -d, -f1); do
            hostname=$(echo "${hostname}" | sed -E 's/^mail\.//')
            docker-compose -p mailu exec admin flask mailu admin --mode "${adminMode}" "${adminAccount}" "${hostname}" "${adminPw}"
        done
    fi
    local upgradable=$(sudo apt list --upgradable 2>/dev/null | tail -n +2 | cut -d/ -f1)
    if [[ -n "${upgradable}" ]]; then
        instance:create-tag BootstrapStatus "upgrading ${upgradable}"
        apt-get install -y ${upgradable}
    fi
    if [[ -f /var/run/reboot-required ]]; then
        instance:create-tag BootstrapStatus rebooting
        reboot
    else
        instance:create-tag BootstrapStatus complete
    fi
}


function mailserver:install_mailu_configuration() {
    cd "${MAILSERVER_HOME}"
    git pull
    local mailuKey=$(head /dev/urandom | tr -dc A-Z0-9 | head -c 16)
    local relayHostSecret=$(mailserver:get-secret mailserver-relayhost)
    local relayHost=$(echo "${relayHostSecret}" | jq -r '.relayhost')
    local relayUser==$(echo "${relayHostSecret}" | jq -r '."smtp-username"')
    local relayPassword==$(echo "${relayHostSecret}" | jq -r '".smtp-password"')
    local version=$(( $(ls -1 "${MAILSERVER_CONFIGURATION_FILE}*" 2>/dev/null | grep -E '\.env(\.[1-9][0-9]*)?$' | wc -l ) + 1 ))
    [[ -f "${MAILSERVER_CONFIGURATION_FILE}" ]] && cp "${MAILSERVER_CONFIGURATION_FILE}" "${MAILSERVER_CONFIGURATION_FILE}.${version}"
    (umask u=r,g=,o= && cat "${MAILSERVER_CONFIGURATION_FILE_TEMPLATE}" | \
        sed -E 's/^SECRET_KEY=.*$/SECRET_KEY='${mailuKey}'/' | \
        sed -E 's/^RELAYHOST=.*$/RELAYHOST='${relayHost}'/' | \
        sed -E 's/^RELAYUSER=.*$/RELAYUSER='${relayUser}'/' | \
        sed -E 's/^RELAYPASSWORD=.*$/RELAYPASSWORD='${relayPassword}'/' | \
        sed -E 's/^INITIAL_ADMIN_ACCOUNT=.*$/INITIAL_ADMIN_ACCOUNT='${initialAdminAccount}'/' | \
        sed -E 's/^INITIAL_ADMIN_PW=.*$/INITIAL_ADMIN_PW='${initialAdminPw}'/' \
        > "${MAILSERVER_CONFIGURATION_FILE}")

        # sed -E 's/^INITIAL_ADMIN_DOMAIN=.*$/INITIAL_ADMIN_DOMAIN='${initialAdminDomain}'/' \

    local localIPv4=$(curl -s "${AWS_META_DATA_ENDPOINT}/local-ipv4")
    version=$(( $(ls -1 "${MAILSERVER_DOCKER_COMPOSE_FILE}*" 2>/dev/null | grep -E '\.env(.[1-9][0-9]*)?$' | wc -l ) + 1 ))
    [[ -f "${MAILSERVER_DOCKER_COMPOSE_FILE}" ]] && cp "${MAILSERVER_DOCKER_COMPOSE_FILE}" "${MAILSERVER_DOCKER_COMPOSE_FILE}.${version}"
    cat "${MAILSERVER_DOCKER_COMPOSE_FILE_TEMPLATE}" | sed -E 's/XXX\.XXX\.XXX\.XXX/'${localIPv4}'/g' > "${MAILSERVER_DOCKER_COMPOSE_FILE}"
}


function mailserver:mail-server-names() {
    echo $(for d in $(grep HOSTNAMES "${MAILSERVER_CONFIGURATION_FILE}" | cut -d= -f2 | cut -d, --output-delimiter ' ' -f1-); do echo "mail.${d}"; done)
}


function mailserver:mount-mailserver-data() {
    local availabilityZone=$(instance:availability-zone)
    local region=$(instance:region)
    local fileSystemId=$(aws --region ${region} efs describe-file-systems | \
                         jq -r '.FileSystems | select(.[].Tags[].Key == "Name") | select(.[].Tags[].Value == "'${MAILSERVER_DATA_FILESYSTEM}'") | .[].FileSystemId')
    local fileSystemName="${fileSystemId}.efs.${region}.amazonaws.com" 
    echo "${fileSystemName}:/ ${MAILSERVER_DATA_MOUNTPOINT} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab
    mkdir -p "${MAILSERVER_DATA_MOUNTPOINT}"
    chown nobody:nogroup "${MAILSERVER_DATA_MOUNTPOINT}"
    mount "${MAILSERVER_DATA_MOUNTPOINT}"
}


function mailserver:set-a-records() {
    instance:set-a-records $(mailserver:mail-server-names)
}


function mailserver:set-cnames() {
    instance:set-cname-records  $(mailserver:mail-server-names)
}


function mailserver:start() {
    cd "${MAILSERVER_HOME}"
    docker-compose -p mailu up -d
}


function mailserver:stop() {
    cd "${MAILSERVER_HOME}"
    docker-compose -p mailu down --remove-orphans
}


